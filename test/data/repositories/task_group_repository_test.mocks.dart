// Mocks generated by Mockito 5.0.14 from annotations
// in task_meter/test/data/repositories/task_group_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_meter/data/datasources/local_storage.dart' as _i3;
import 'package:task_meter/data/datasources/remote_storage.dart' as _i7;
import 'package:task_meter/domain/models/settings.dart' as _i2;
import 'package:task_meter/domain/models/task_group.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeSettings_0 extends _i1.Fake implements _i2.Settings {}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class LocalStorageMock extends _i1.Mock implements _i3.LocalStorage {
  LocalStorageMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isFirstTimeUser => (super
          .noSuchMethod(Invocation.getter(#isFirstTimeUser), returnValue: false)
      as bool);
  @override
  set isFirstTimeUser(bool? value) =>
      super.noSuchMethod(Invocation.setter(#isFirstTimeUser, value),
          returnValueForMissingStub: null);
  @override
  bool get hasPassedTutorial =>
      (super.noSuchMethod(Invocation.getter(#hasPassedTutorial),
          returnValue: false) as bool);
  @override
  set hasPassedTutorial(bool? value) =>
      super.noSuchMethod(Invocation.setter(#hasPassedTutorial, value),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i5.User?> autoSigninUser() =>
      (super.noSuchMethod(Invocation.method(#autoSigninUser, []),
          returnValue: Future<_i5.User?>.value()) as _i4.Future<_i5.User?>);
  @override
  _i4.Future<void> logoutUser() =>
      (super.noSuchMethod(Invocation.method(#logoutUser, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Settings> fetchSettings() =>
      (super.noSuchMethod(Invocation.method(#fetchSettings, []),
              returnValue: Future<_i2.Settings>.value(_FakeSettings_0()))
          as _i4.Future<_i2.Settings>);
  @override
  _i4.Future<void> updateSettings(_i2.Settings? newSettings) =>
      (super.noSuchMethod(Invocation.method(#updateSettings, [newSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i6.TaskGroup>> fetchTaskGroups() =>
      (super.noSuchMethod(Invocation.method(#fetchTaskGroups, []),
              returnValue: Future<List<_i6.TaskGroup>>.value(<_i6.TaskGroup>[]))
          as _i4.Future<List<_i6.TaskGroup>>);
  @override
  _i4.Future<DateTime?> getLastTaskGroupUpdateTime() =>
      (super.noSuchMethod(Invocation.method(#getLastTaskGroupUpdateTime, []),
          returnValue: Future<DateTime?>.value()) as _i4.Future<DateTime?>);
  @override
  _i4.Future<void> updateTaskGroups(
          List<_i6.TaskGroup>? taskGroups, DateTime? timeOfUpdate) =>
      (super.noSuchMethod(
          Invocation.method(#updateTaskGroups, [taskGroups, timeOfUpdate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RemoteStorage].
///
/// See the documentation for Mockito's code generation for more information.
class RemoteStorageMock extends _i1.Mock implements _i7.RemoteStorage {
  RemoteStorageMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.User?> signinUserWithEmail(String? email, String? password) =>
      (super.noSuchMethod(
          Invocation.method(#signinUserWithEmail, [email, password]),
          returnValue: Future<_i5.User?>.value()) as _i4.Future<_i5.User?>);
  @override
  _i4.Future<_i5.User?> signupUserWithEmail(String? email, String? password) =>
      (super.noSuchMethod(
          Invocation.method(#signupUserWithEmail, [email, password]),
          returnValue: Future<_i5.User?>.value()) as _i4.Future<_i5.User?>);
  @override
  _i4.Future<_i5.User?> signinUserWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#signinUserWithGoogle, []),
          returnValue: Future<_i5.User?>.value()) as _i4.Future<_i5.User?>);
  @override
  _i4.Future<bool> recoverPassword(String? email) =>
      (super.noSuchMethod(Invocation.method(#recoverPassword, [email]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.Settings?> fetchSettings() => (super.noSuchMethod(
      Invocation.method(#fetchSettings, []),
      returnValue: Future<_i2.Settings?>.value()) as _i4.Future<_i2.Settings?>);
  @override
  _i4.Future<void> updateSettings(_i2.Settings? newSettings) =>
      (super.noSuchMethod(Invocation.method(#updateSettings, [newSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i6.TaskGroup>?> fetchTaskGroups() =>
      (super.noSuchMethod(Invocation.method(#fetchTaskGroups, []),
              returnValue: Future<List<_i6.TaskGroup>?>.value())
          as _i4.Future<List<_i6.TaskGroup>?>);
  @override
  _i4.Future<DateTime?> getLastTaskGroupUpdateTime() =>
      (super.noSuchMethod(Invocation.method(#getLastTaskGroupUpdateTime, []),
          returnValue: Future<DateTime?>.value()) as _i4.Future<DateTime?>);
  @override
  _i4.Future<void> deleteTaskGroup(String? id, DateTime? timeOfUpdate) => (super
      .noSuchMethod(Invocation.method(#deleteTaskGroup, [id, timeOfUpdate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateTaskGroups(
          List<_i6.TaskGroup>? taskGroups, DateTime? timeOfUpdate) =>
      (super.noSuchMethod(
          Invocation.method(#updateTaskGroups, [taskGroups, timeOfUpdate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> addTaskGroup(_i6.TaskGroup? tg, DateTime? timeOfUpdate) =>
      (super.noSuchMethod(Invocation.method(#addTaskGroup, [tg, timeOfUpdate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}
